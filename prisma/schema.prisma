// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Person {
  id           String    @id @default(cuid())
  name         String
  email        String?
  phone        String?
  company      String?
  places       Place[]   @relation("PersonPlaces")
  activities   Activity[] @relation("ActivityParticipants")
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Place {
  id           String    @id @default(cuid())
  name         String 
  description  String? 
  image        String? 
  location     String? 
  coordinates  String?
  people       Person[]  @relation("PersonPlaces")
  activities   Activity[] @relation("ActivityLocations")
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Activity {
  id           String    @id @default(cuid())
  name         String
  description  String?
  image        String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  people       Person[]  @relation("ActivityParticipants")
  places       Place[]   @relation("ActivityLocations")
}

// food is a combination of vegetables, meat... as Pasta
// meal is the event of eating somewhere, with someone...
model Food {
  id          String    @id @default(cuid())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Meal {
  id          String    @id @default(cuid())
  date        DateTime @default(now())
  type       String   @default("Lunch")
  description String?
  image       String? 
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}




model Transport {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  type        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}